(define (rectangle x1 y1 x2 y2 color)
  (vector x1 y1 x2 y2 color))

(define (get-x1 rect)
  (vector-ref rect 0))

(define (get-y1 rect)
  (vector-ref rect 1))

(define (get-x2 rect)
  (vector-ref rect 2))

(define (get-y2 rect)
  (vector-ref rect 3))

(define (get-color rect)
  (vector-ref rect 4))

(define (valid? rect)
  (and (< (get-x1 rect) (get-x2 rect))
       (< (get-y1 rect) (get-y2 rect))))

(define (intersection rect1 rect2 color)
  (rectangle (max (get-x1 rect1) (get-x1 rect2))
             (max (get-y1 rect1) (get-y1 rect2))
             (min (get-x2 rect1) (get-x2 rect2))
             (min (get-y2 rect1) (get-y2 rect2))
             color))

(define (left-edge outer-rect inner-rect color)
  (rectangle (get-x1 outer-rect)
             (get-y1 outer-rect)
             (get-x1 inner-rect)
             (get-y2 outer-rect)
             color))

(define (right-edge outer-rect inner-rect color)
  (rectangle (get-x2 inner-rect)
             (get-y1 outer-rect)
             (get-x2 outer-rect)
             (get-y2 outer-rect)
             color))

(define (top-edge outer-rect inner-rect color)
  (rectangle (get-x1 outer-rect)
             (get-y2 inner-rect)
             (get-x2 outer-rect)
             (get-y2 outer-rect)
             color))

(define (lower-edge outer-rect inner-rect color)
  (rectangle (get-x1 outer-rect)
             (get-y1 outer-rect)
             (get-x2 outer-rect)
             (get-y1 inner-rect)
             color))

(define (calc-edges outer-rect inner-rect color)
  (define lst '())
  (define t (top-edge outer-rect inner-rect color))
  (define r (right-edge outer-rect inner-rect color))
  (define b (lower-edge outer-rect inner-rect color))
  (define l (left-edge outer-rect inner-rect color))
  (for-each (lambda (edge) (if (valid? edge)
                               (set! lst (cons edge lst))))
            (list r t b l))
  lst)

(define (insert rect lst)
  (cond ((null? lst) (cons rect '()))
        ((< (get-x1 rect) (get-x1 (car lst)))
         (cons rect lst))
        (else (cons (car lst) (insert rect (cdr lst))))))

(define (copy lst)
  (if (null? lst)
      '() 
      (cons (car lst) (copy (cdr lst)))))

(define r1 (rectangle 0 0 500 500 'red))
(define r2 (rectangle 0 50 200 200 'blue))
(calc-edges r1 r2 'purple)